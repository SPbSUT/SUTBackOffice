(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'cont' is not defined"
p3
sS'layer'
p4
S'/home/ze0/Workspace/SUTBackOffice/web2py/applications/SUTBackoffice/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.pageTitle = T("Dashboard")\n    response.pageSubtitle = T("overview of the application")\n    response.flash = T("Hello World")\n    response.active=1\n    return dict(message=T(\'Welcome to web2py!\'))\n\ndef rooms():\n    rooms="test"\n\n\n    rooms = items.Query.all()\n\n    form = FORM(DIV(\n                INPUT(_name=\'title\', _class="form-control", _placeholder="Name" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'content\', _class="form-control", _placeholder="Description of the room" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'floor\', _class="form-control", _placeholder="Floor" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'number\', _class="form-control", _placeholder="Number" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'workhours\', _class="form-control", _placeholder="Work Hours ex: 10h00-16h00" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'phone\', _class="form-control", _placeholder="Tel ex: +7 (812) 305-12-37" ,requires=IS_NOT_EMPTY()),\n\n                INPUT(_type=\'submit\', _class="btn btn-primary")\n                ))\n\n    if form.process().accepted: \n        message = \'form accepted\'\n        room = items()\n        room.title = form.vars.title\n        room.content = form.vars.content\n        room.floor = int(form.vars.floor)\n        room.number = int(form.vars.number)\n        room.workhours = form.vars.workhours\n        room.phone = form.vars.phone\n        room.save()\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n    response.pageTitle = T("Rooms management")\n    response.pageSubtitle = T("All information about rooms in university")\n    response.active=2\n    return dict(rooms=rooms, form=form, message=message)\n\n\ndef editRoom():\n    rooms = items.Query.all()\n\n    room = items.Query.get(objectId=request.args[0])\n    form = FORM(DIV(\n                INPUT(_name=\'title\', _class="form-control", _placeholder="Name" ,requires=IS_NOT_EMPTY(), value=room.title),\n                INPUT(_name=\'content\', _class="form-control", _placeholder="Description of the room" ,requires=IS_NOT_EMPTY(), value=room.content),\n                INPUT(_name=\'floor\', _class="form-control", _placeholder="Floor" ,requires=IS_NOT_EMPTY(), value=room.floor),\n                INPUT(_name=\'number\', _class="form-control", _placeholder="Number" ,requires=IS_NOT_EMPTY(), value=room.number),\n                INPUT(_name=\'workhours\', _class="form-control", _placeholder="Work Hours ex: 10h00-16h00" ,requires=IS_NOT_EMPTY(), value=room.workhours),\n                INPUT(_name=\'phone\', _class="form-control", _placeholder="Tel ex: +7 (812) 305-12-37" ,requires=IS_NOT_EMPTY(), value=room.phone),\n\n                INPUT(_type=\'submit\', _class="btn btn-primary")\n                ))\n\n    if form.process().accepted:\n        message = \'form accepted\'\n        room.title = form.vars.title\n        room.content = form.vars.content\n        room.floor = int(form.vars.floor)\n        room.number = int(form.vars.number)\n        room.workhours = form.vars.workhours\n        room.phone = form.vars.phone\n        room.save()\n        redirect(URL(\'default\', \'rooms\'))\n\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n    response.pageTitle = T("Rooms management")\n    response.pageSubtitle = T("All information about rooms in university")\n    response.active=2\n    return dict(rooms=rooms, form=form, message=message)\n\n\ndef deleteRoom():\n    objectId = request.args[0]\n    room = items.Query.get(objectId=objectId)\n    room.delete()\n    redirect(URL(\'default\', \'rooms\'))\n\n\ndef dormitory():\n    category = categories.Query.get(name="Dormitory")\n    infos = information.Query.filter(categoriesId=category.objectId)\n\n    response.view = \'default/information.html\'\n    response.pageTitle = T("Information overview")\n    response.pageSubtitle = T("All information about administrative information")\n    response.active=33\n    return dict(items=infos)\n\n\ndef immigration():\n    category = categories.Query.get(name="Immigration")\n    infos = information.Query.filter(categoriesId=category.objectId)\n\n    response.view = \'default/information.html\'\n    response.pageTitle = T("Information overview")\n    response.pageSubtitle = T("All information about administrative information")\n    response.active=34\n    return dict(items=infos)\n\n\ndef transport():\n    category = categories.Query.get(name="Transport")\n    infos = information.Query.filter(categoriesId=category.objectId)\n\n    response.view = \'default/information.html\'\n    response.pageTitle = T("Information overview")\n    response.pageSubtitle = T("All information about administrative information")\n    response.active=35\n    return dict(items=infos)\n\n\ndef university():\n    category = categories.Query.get(name="University")\n    infos = information.Query.filter(categoriesId=category.objectId)\n\n    response.view = \'default/information.html\'\n    response.pageTitle = T("Information overview")\n    response.pageSubtitle = T("All information about administrative information")\n    response.active=36\n    return dict(items=infos)\n\n\ndef newInformation():\n    category = categories.Query.all()\n    cat = ["Select a category"]\n    for c in category:\n        cat.append(c.name)\n\n    form = FORM(DIV(\n                INPUT(_name=\'title\', _class="form-control", _placeholder="title" ,requires=IS_NOT_EMPTY()),\n                SELECT(cat, value=cat[0], _class="form-control", _name="category"),\n                TEXTAREA(_id="content", _name=\'content\', _class="form-control", _placeholder="Write your content here" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'description\', _class="form-control", _placeholder="Short description of the content" ,requires=IS_NOT_EMPTY()),\n                INPUT(_type="hidden"),\n                INPUT(_type=\'submit\', _class="btn btn-primary")\n                ))\n\n    if form.process().accepted:\n        message = \'form accepted\'\n        info = information()\n\n        info.title = form.vars.title\n        info.description = form.vars.description\n        info.content = form.vars.content\n        info.categoriesId = categories.Query.get(name=form.vars.category).objectId\n        info.save()\n        #redirect(URL(\'default\', \'rooms\'))\n\n\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n\n    response.pageTitle = T("New Information")\n    response.pageSubtitle = T("Here you can see and edit administrative information")\n    response.active=32\n    return dict(form=form, message=message)\n\ndef editInformation():\n    category = categories.Query.all()\n    cat = ["Select a category"]\n    for c in category:\n        cat.append(c.name)\n\n    cati = 0\n\n    info = information.Query.get(objectId=request.args[0])\n    i = 1\n    for c in category:\n        if c.objectId == info.categoriesId:\n            cati = i\n        i = i + 1\n\n\n    form = FORM(DIV(\n        INPUT(_name=\'title\', _class="form-control", _placeholder="title" ,requires=IS_NOT_EMPTY(), value=info.title),\n        SELECT(cat, value=cat[cati], _class="form-control", _name="category"),\n        TEXTAREA(_id="content", _name=\'content\', _class="form-control", _style="height: 800px",_placeholder="Write your content here" , requires=IS_NOT_EMPTY(), value=info.content),\n        INPUT(_name=\'description\', _class="form-control", _placeholder="Short description of the content" ,requires=IS_NOT_EMPTY(), value=info.description),\n\n        INPUT(_type=\'submit\', _class="btn btn-primary")\n    ))\n\n    if form.process().accepted:\n\n        message = \'form accepted\'\n\n        info.title = form.vars.title\n        info.description = form.vars.description\n        info.content = form.vars.content\n        info.categoriesId = categories.Query.get(name=form.vars.category).objectId\n        info.save()\n        redirect(URL(\'default\', \'index\'))\n\n\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n    response.view = \'default/newInformation.html\'\n    response.pageTitle = T("edit Information")\n    response.pageSubtitle = T("Here you can see and edit administrative information")\n    response.active=32\n    return dict(form=form, message=message)\n\ndef deleteInformation():\n    objectId = request.args[0]\n    info = information.Query.get(objectId=objectId)\n    info.delete()\n    redirect(URL(\'default\', \'index\'))\n\n\ndef contacts():\n    cont = contact.Query.all()\n\n    response.view = \'default/contact.html\'\n    response.pageTitle = T("Contact overview")\n    response.pageSubtitle = T("All information about contact")\n    response.active=4\n    return dict(items=cont)\n\ndef newContact():\n\n    form = FORM(DIV(\n                INPUT(_name=\'firstname\', _class="form-control", _placeholder="First Name" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'lastname\', _class="form-control", _placeholder="Last Name" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'job\', _class="form-control", _placeholder="Job" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'telephone\', _class="form-control", _placeholder="Telephone" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'email\', _class="form-control", _placeholder="email" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'photo\', _class="form-control", _placeholder="photo" ,requires=IS_NOT_EMPTY()),\n                INPUT(_type=\'submit\', _class="btn btn-primary")\n                ))\n\n    if form.process().accepted:\n        message = \'form accepted\'\n        info = contact()\n\n        info.firstName = form.vars.firstname\n        info.lastName = form.vars.lastname\n        info.job = form.vars.job\n        info.tel = form.vars.telephone\n        info.email = form.vars.email\n        info.photo = form.vars.photo\n        info.save()\n        #redirect(URL(\'default\', \'rooms\'))\n\n\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n\n    response.pageTitle = T("New contact")\n    response.pageSubtitle = T("Here you can create a new")\n    response.active=32\n    return dict(form=form, message=message)\n\ndef editContact():\n\n    c = contact.Query.get(objectId=request.args[0])\n\n    form = FORM(DIV(\n                INPUT(_name=\'firstname\', _class="form-control", _placeholder="First Name" ,requires=IS_NOT_EMPTY(), value=c.firstName),\n                INPUT(_name=\'lastname\', _class="form-control", _placeholder="Last Name" ,requires=IS_NOT_EMPTY(), value=c.lastName),\n                INPUT(_name=\'job\', _class="form-control", _placeholder="Job" ,requires=IS_NOT_EMPTY(), value=c.job),\n                INPUT(_name=\'telephone\', _class="form-control", _placeholder="Telephone" ,requires=IS_NOT_EMPTY(), value=c.tel),\n                INPUT(_name=\'email\', _class="form-control", _placeholder="email" ,requires=IS_NOT_EMPTY(), value=c.email),\n                INPUT(_name=\'photo\', _class="form-control", _placeholder="photo" ,requires=IS_NOT_EMPTY(), value=c.photo),\n                INPUT(_type=\'submit\', _class="btn btn-primary")\n                ))\n\n    if form.process().accepted:\n        message = \'form accepted\'\n\n        c.firstName = form.vars.firstname\n        c.lastName = form.vars.lastname\n        c.job = form.vars.job\n        c.tel = form.vars.telephone\n        c.email = form.vars.email\n        c.photo = form.vars.photo\n        c.save()\n        redirect(URL(\'default\', \'contacts\'))\n\n\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n    response.view = \'default/newContact.html\'\n    response.pageTitle = T("Edit Contact")\n    response.pageSubtitle = T("Here you can see and edit contact")\n    response.active=4\n    return dict(form=form, message=message)\n\ndef vkInternationalCooperation():\n    import vk_api\n    import json\n    login, password = \'cygrosjean@gmail.com\', \'\'\n    try:\n        vk = vk_api.VkApi(login, password)\n    except vk_api.AuthorizationError as error_msg:\n        print(error_msg) \n        return\n\n    values = {\n        \'count\': 5, # \xd0\x9f\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbd \xd0\xbf\xd0\xbe\xd1\x81\xd1\x82\n        \'domain\' : \'international_cooperation_spbsut\'\n    }\n    jsonVk = vk.method(\'wall.get\', values)\n    news=[]\n    for (val) in jsonVk["items"]:\n        new = {}\n        new[\'id\'] = val["id"]\n        if not val["text"]:\n            for copy_history in val["copy_history"]:\n                new[\'text\'] = copy_history["text"];\n            new[\'repost\'] = 1\n        else:\n            new[\'text\'] = val["text"]\n            new[\'repost\'] = 0\n        news.append(new)\n    response.pageTitle = T("VK InternationnalCooperation")\n    response.pageSubtitle = T("Yep it\'s VK ;)")\n    response.active=5\n    return dict(news=news, message="")\n\ndef vkNewsEnglish():\n    import vk_api\n    import json\n    login, password = \'cygrosjean@gmail.com\', \'\'\n    try:\n        vk = vk_api.VkApi(login, password)\n    except vk_api.AuthorizationError as error_msg:\n        print(error_msg) \n        return\n\n    values = {\n        \'count\': 5, # \xd0\x9f\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xba\xd0\xbe \xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbd \xd0\xbf\xd0\xbe\xd1\x81\xd1\x82\n        \'domain\' : \'bonch.news.english\'\n    }\n    jsonVk = vk.method(\'wall.get\', values)\n    news=[]\n    for (val) in jsonVk["items"]:\n        new = {}\n        new[\'id\'] = val["id"]\n        if not val["text"]:\n            for copy_history in val["copy_history"]:\n                new[\'text\'] = copy_history["text"];\n            new[\'repost\'] = 1\n        else:\n            new[\'text\'] = val["text"]\n            new[\'repost\'] = 0\n        news.append(new)\n    response.pageTitle = T("VK News English")\n    response.pageSubtitle = T("Yep it\'s VK ;)")\n    response.active=6\n    return dict(news=news, message="")\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\ndef deleteContact():\n    objectId = request.args[0]\n    info = contact.Query.get(objectId=objectId)\n    info.delete()\n    redirect(URL(\'default\', \'contacts\'))\n\n\ndef calendars():\n    calendars = calendar.Query.all()\n\n    response.view = \'default/calendar.html\'\n    response.pageTitle = T("Calendar overview")\n    response.pageSubtitle = T("All information about schedule")\n    response.active=7\n    return dict(items=cont)\n\ndef newContact():\n\n    form = FORM(DIV(\n                INPUT(_name=\'name\', _class="form-control", _placeholder="Name" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'irame\', _class="form-control", _placeholder="Iframe" ,requires=IS_NOT_EMPTY()),\n                INPUT(_type=\'submit\', _class="btn btn-primary")\n                ))\n\n    if form.process().accepted:\n        message = \'form accepted\'\n        info = calendar()\n\n        info.name = form.vars.name\n        info.iframe = form.vars.iframe\n        info.save()\n        #redirect(URL(\'default\', \'rooms\'))\n\n\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n    response.view = \'default/newContact\'\n    response.pageTitle = T("New Calendar")\n    response.pageSubtitle = T("Here you can create a new calendar")\n    response.active=7\n    return dict(form=form, message=message)\n\nresponse._vars=response._caller(calendars)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ze0/Workspace/SUTBackOffice/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/ze0/Workspace/SUTBackOffice/web2py/applications/SUTBackoffice/controllers/default.py", line 456, in <module>\n  File "/home/ze0/Workspace/SUTBackOffice/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ze0/Workspace/SUTBackOffice/web2py/applications/SUTBackoffice/controllers/default.py", line 425, in calendars\n    return dict(items=cont)\nNameError: global name \'cont\' is not defined\n'
p11
s.