(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'information' object has no attribute 'categoryId'"
p3
sS'layer'
p4
S'/home/ze0/Workspace/SUTBackoffice/web2py/applications/SUTBackoffice/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.pageTitle = T("Dashboard")\n    response.pageSubtitle = T("overview of the application")\n    response.flash = T("Hello World")\n    response.active=1\n    return dict(message=T(\'Welcome to web2py!\'))\n\ndef rooms():\n    rooms="test"\n\n\n    rooms = items.Query.all()\n\n    form = FORM(DIV(\n                INPUT(_name=\'title\', _class="form-control", _placeholder="Name" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'content\', _class="form-control", _placeholder="Description of the room" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'floor\', _class="form-control", _placeholder="Floor" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'number\', _class="form-control", _placeholder="Number" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'workhours\', _class="form-control", _placeholder="Work Hours ex: 10h00-16h00" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'phone\', _class="form-control", _placeholder="Tel ex: +7 (812) 305-12-37" ,requires=IS_NOT_EMPTY()),\n\n                INPUT(_type=\'submit\', _class="btn btn-primary")\n                ))\n\n    if form.process().accepted:\n        message = \'form accepted\'\n        room = items()\n        room.title = form.vars.title\n        room.content = form.vars.content\n        room.floor = int(form.vars.floor)\n        room.number = int(form.vars.number)\n        room.workhours = form.vars.workhours\n        room.phone = form.vars.phone\n        room.save()\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n    response.pageTitle = T("Rooms management")\n    response.pageSubtitle = T("All information about rooms in university")\n    response.active=2\n    return dict(rooms=rooms, form=form, message=message)\n\n\ndef editRoom():\n    rooms = items.Query.all()\n\n    room = items.Query.get(objectId=request.args[0])\n    form = FORM(DIV(\n                INPUT(_name=\'title\', _class="form-control", _placeholder="Name" ,requires=IS_NOT_EMPTY(), value=room.title),\n                INPUT(_name=\'content\', _class="form-control", _placeholder="Description of the room" ,requires=IS_NOT_EMPTY(), value=room.content),\n                INPUT(_name=\'floor\', _class="form-control", _placeholder="Floor" ,requires=IS_NOT_EMPTY(), value=room.floor),\n                INPUT(_name=\'number\', _class="form-control", _placeholder="Number" ,requires=IS_NOT_EMPTY(), value=room.number),\n                INPUT(_name=\'workhours\', _class="form-control", _placeholder="Work Hours ex: 10h00-16h00" ,requires=IS_NOT_EMPTY(), value=room.workhours),\n                INPUT(_name=\'phone\', _class="form-control", _placeholder="Tel ex: +7 (812) 305-12-37" ,requires=IS_NOT_EMPTY(), value=room.phone),\n\n                INPUT(_type=\'submit\', _class="btn btn-primary")\n                ))\n\n    if form.process().accepted:\n        message = \'form accepted\'\n        room.title = form.vars.title\n        room.content = form.vars.content\n        room.floor = int(form.vars.floor)\n        room.number = int(form.vars.number)\n        room.workhours = form.vars.workhours\n        room.phone = form.vars.phone\n        room.save()\n        redirect(URL(\'default\', \'rooms\'))\n\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n    response.pageTitle = T("Rooms management")\n    response.pageSubtitle = T("All information about rooms in university")\n    response.active=2\n    return dict(rooms=rooms, form=form, message=message)\n\n\ndef deleteRoom():\n    objectId = request.args[0]\n    room = items.Query.get(objectId=objectId)\n    room.delete()\n    redirect(URL(\'default\', \'rooms\'))\n\n\ndef university():\n    infos = information.Query.all()\n    category = categories.Query.get(name="University")\n    list = []\n    for inf in infos:\n        if inf.categoryId == category.objectId:\n            list.oin(inf)\n\n    return dict(items=list)\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(university)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ze0/Workspace/SUTBackoffice/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/ze0/Workspace/SUTBackoffice/web2py/applications/SUTBackoffice/controllers/default.py", line 138, in <module>\n  File "/home/ze0/Workspace/SUTBackoffice/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ze0/Workspace/SUTBackoffice/web2py/applications/SUTBackoffice/controllers/default.py", line 112, in university\n    if inf.categoryId == category.objectId:\n  File "/usr/local/lib/python2.7/dist-packages/parse_rest/datatypes.py", line 330, in __getattr__\n    return object.__getattribute__(self, attr) #preserve default if attr not exists\nAttributeError: \'information\' object has no attribute \'categoryId\'\n'
p11
s.