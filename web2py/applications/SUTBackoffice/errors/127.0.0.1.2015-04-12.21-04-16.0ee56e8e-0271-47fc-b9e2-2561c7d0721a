(dp1
S'output'
p2
S'<class \'parse_rest.core.ResourceRequestBadRequest\'> {"code":111,"error":"invalid type for key number, expected number, but got string"}\n'
p3
sS'layer'
p4
S'/home/ze0/Workspace/SUTBackoffice/web2py/applications/SUTBackoffice/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.pageTitle = T("Dashboard")\n    response.pageSubtitle = T("overview of the application")\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\ndef rooms():\n    rooms="test"\n\n    import parse_rest.datatypes\n\n    class items(parse_rest.datatypes.Object):\n        pass\n\n    rooms = items.Query.all()\n\n    form = FORM(DIV(\n                INPUT(_name=\'title\', _class="form-control", _placeholder="Name" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'content\', _class="form-control", _placeholder="Description of the room" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'floor\', _class="form-control", _placeholder="Floor" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'number\', _class="form-control", _placeholder="Number" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'workhours\', _class="form-control", _placeholder="Work Hours ex: 10h00-16h00" ,requires=IS_NOT_EMPTY()),\n                INPUT(_name=\'phone\', _class="form-control", _placeholder="Tel ex: +7 (812) 305-12-37" ,requires=IS_NOT_EMPTY()),\n\n                INPUT(_type=\'submit\', _class="btn btn-primary")\n                ))\n\n    if form.process().accepted:\n        message = \'form accepted\'\n        room = items()\n        room.title = form.vars.title\n        room.content = form.vars.content\n        room.floor = int(form.vars.floor)\n        room.number = form.vars.number\n        room.workhours = form.vars.workhours\n        room.phone = form.vars.phone\n        room.save()\n    elif form.errors:\n        message = \'form has errors\'\n    else:\n        message = \'please fill out the form\'\n\n    response.pageTitle = T("Rooms management")\n    response.pageSubtitle = T("All information about rooms in university")\n    return dict(rooms=rooms, form=form, message=message)\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(rooms)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ze0/Workspace/SUTBackoffice/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/ze0/Workspace/SUTBackoffice/web2py/applications/SUTBackoffice/controllers/default.py", line 104, in <module>\n  File "/home/ze0/Workspace/SUTBackoffice/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ze0/Workspace/SUTBackoffice/web2py/applications/SUTBackoffice/controllers/default.py", line 54, in rooms\n    room.save()\n  File "/usr/local/lib/python2.7/dist-packages/parse_rest/datatypes.py", line 356, in save\n    return self._create(batch=batch)\n  File "/usr/local/lib/python2.7/dist-packages/parse_rest/datatypes.py", line 360, in _create\n    response = self.__class__.POST(uri, batch=batch, **self._to_native())\n  File "/usr/local/lib/python2.7/dist-packages/parse_rest/connection.py", line 137, in POST\n    return cls.execute(uri, \'POST\', **kw)\n  File "/usr/local/lib/python2.7/dist-packages/parse_rest/connection.py", line 127, in execute\n    raise exc(e.read())\nResourceRequestBadRequest: {"code":111,"error":"invalid type for key number, expected number, but got string"}\n\n'
p11
s.